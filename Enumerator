import numpy as np
import time

start_time = time.time()

def stacker(cycle, con, H):
    X, Y = cycle.shape      #x is the row, starting from top; y is column from left
    states = np.zeros(Y)
    for x in range (0, X):
        for y in range (0, Y):
            cycle_cop = cycle.copy()
            if x == H-1:
                if cycle[x][y] == 0:
                    cycle_cop[x][y] = con
                    states = np.vstack((states, cycle_cop))
            elif cycle[x][y] == 0:
                if cycle[x+1][y] != 0:
                    cycle_cop[x][y] = con
                    states = np.vstack((states, cycle_cop))
    states = np.delete(states, (0), axis=0)
    states = np.reshape(states, (Y, X, Y))
    return states

def cycler(state, containers):
    H, B = state.shape
    tot_state = np.zeros(B)
    series = stacker(state, containers[0], H)
    for i in range (0, len(series)):
        newseries = stacker(series[i], containers[1], H)
        for j in range (0, len(newseries)):
            newnewseries = stacker(newseries[j], containers[2], H)
            for k in range(0, len(newnewseries)):
                tot_state = np.vstack((tot_state, newnewseries[k]))
    fin_state = np.delete(tot_state, (0), axis = 0)
    N = len(fin_state)
    res_state = np.reshape(fin_state, (int(N/H), H, B))
    return res_state
        

test = np.array([[0, 0, 0],
                 [0, 0, 0],
                 [0, 0, 0],
                 [1, 0, 0]])
print(test)
C = np.array([5, 4, 3])
print(cycler(test, C))     



    

