import itertools as it
import numpy as np


def bubble_sort(col):
    Ylen = len(col)
    swaps = 0
    for j in range(Ylen):
        for k in range(0, Ylen-j-1):
            if col[k] < col[k+1]:
                col[k], col[k+1] = col[k+1], col[k]
                swaps += 1
    return swaps

def zero_delete(arr):
    N = len(arr)
    new_arr = np.array([])
    for i in range (0, N):
        if arr[i] != 0:
            new_arr = np.append(new_arr, arr[i])
    while len(new_arr) > N:
        new_arr = np.append(new_arr, 0)
    return new_arr

def main(Containers, B):
    Clen = len(Containers)
    C_next = Containers[-1]
    Containers_1 = np.delete(Containers, Clen-1)
    Sort_cons = np.sort(Containers_1)
    Slen = len(Sort_cons)
    Iter_combos = {}
    for i in range (1, Slen+1):
        Iter_combos[i] = it.combinations(Sort_cons, r = i)
    Stack_combos = {}
    j = 0
    for i in range(1, Slen+1):
        for IC in Iter_combos[i]:
            IC_array = np.array(IC)     
            Stack_combos[j] = IC_array
            j += 1
    N = len(Stack_combos)
    N1 = int(N-1)
    N12 = int(N1/2)
    Stack_pairs = {}
    for i in range(0, N12):
        for j in range(N12, N1):
            if len(np.intersect1d(Stack_combos[i], Stack_combos[j])) == 0:
                Stack_pairs[i] = Stack_combos[i], Stack_combos[j]
    Stack_pairs[N12] = np.zeros(Slen), Stack_combos[N-1]
    NSP = len(Stack_pairs)
    states = [0]*(NSP)
    for i in Stack_pairs:
        couple = Stack_pairs[i]
        L = len(couple)
        new_couple = [0]*B
        for j in range(0, L):
            element = np.sort(couple[j])[::-1]
            while len(element) < Slen:
                element = np.append(element, 0)
            new_couple[j] = element
        #print(f" State {i} has {B} columns: column 0 is {new_couple[0]} and column 1 is {new_couple[1]}")
        states[i] = new_couple
    shuffles = np.zeros((NSP, B))
    for i in range(0, NSP):
        for j in range(0,B):
            column = states[i][j]
            column = np.append(column, C_next)
            column = zero_delete(column)
            value = bubble_sort(column.copy())
            #print(f"If you place container {C_next} in column {j} of state {i} there will be {value} reshuffles")
            shuffles[i][j] = value
    return shuffles, states
    

def matx_gen(listarr):
    matx_list = [0]*len(listarr)
    i = 0
    for L in listarr:
        matx_list[i] = np.column_stack((L[0], L[1]))
        i += 1
    return matx_list

def min_finder(matx):
    baseline = np.inf
    Mlen = len(matx)
    for i in range(0, Mlen):
        if np.min(matx[i]) < baseline:
            baseline = np.min(matx[i])
    for i in range(0, Mlen):
        if np.min(matx[i]) == baseline:
            print(np.argmin(matx[i]), i)

def removal(MX, r):
    matx  = MX.copy()
    row, col = matx.shape
    for i in range(0, row):
        for j in range(0, col):
            if matx[i, j] == r:
                matx[i, j] = 0
    for j in range(0, row):
        matx[j] = np.sort(matx[j])[::-1]
    return matx

def dict_gen(matx, shuffles, level):
    nodes = {}
    Mlen = len(matx)
    count = 1
    for i in range (0, Mlen):
        index = str(level)+str(count)
        nodes[int(index)] = (matx[i].T, shuffles[i].T)
        count += 1
    return nodes

def equivalency(MX1, MX2):
    if np.array_equal(MX1, MX2) == True:
        return True
    elif np.array_equal(np.flip(MX1, axis = 0), MX2) == True:
        return True
    else:
        return False

def match(nodes1, nodes2, con):
    links = {}
    for i in nodes1:
        test = removal(nodes1[i][0], con)
        for j in nodes2:
            if equivalency(test, nodes2[j][0]) == True:
                links[i] = j
    return links

def flip(diction):
    new_dict = {}
    for i in diction:
        for j in diction:
            if i != j:
                if diction[i] == diction[j]:
                    new_dict[diction[i]] = np.array([i, j])
    return new_dict
        
q = np.array([2, 1, 4, 3])
r = np.array([2, 1, 4])
s = np.array([2, 1])
t = np.array([2])

qshuffs, qstats = main(q, 2)
rshuffs, rstats = main(r, 2)
sshuffs, sstats = main(s, 2)

level = 4
qnodes = dict_gen(matx_gen(qstats), qshuffs, 3)
rnodes = dict_gen(matx_gen(rstats), rshuffs, 2)
snodes = dict_gen(matx_gen(sstats), sshuffs, 1)


#print(qnodes)
Qlen = len(qnodes)
qkeys = np.array([])
for i in qnodes:
    qkeys = np.append(qkeys, i)

#print(qkeys)
for i in range(0, Qlen):
    for j in range(i+1, Qlen):
        print(qkeys[i], qkeys[j])
        truth = equivalency(removal(qnodes[qkeys[i]][0], 4), removal(qnodes[qkeys[j]][0], 4))
        print(truth)
        if truth == True:
            print(removal(qnodes[qkeys[j]][0], 4))
    
    
#print(Statesq)
#print(Valueq)
#print(Statesr)
#print(Valuer)

#print(rnodes)
#Valuer, Statesr = subtraction(Statesq, 3, 2)
#print(snodes)

                  
                
                
                
                
                
                
                
