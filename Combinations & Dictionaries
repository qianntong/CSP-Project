import itertools as it
import numpy as np


def bubble_sort(col):
    Ylen = len(col)
    swaps = 0
    for j in range(Ylen):
        for k in range(0, Ylen-j-1):
            if col[k] < col[k+1]:
                col[k], col[k+1] = col[k+1], col[k]
                swaps += 1
    return swaps

def zero_delete(arr):
    N = len(arr)
    new_arr = np.array([])
    for i in range (0, N):
        if arr[i] != 0:
            new_arr = np.append(new_arr, arr[i])
    while len(new_arr) > N:
        new_arr = np.append(new_arr, 0)
    return new_arr

def main(Containers, B):
    Clen = len(Containers)
    C_next = Containers[-1]
    Containers_1 = np.delete(Containers, Clen-1)
    Sort_cons = np.sort(Containers_1)
    Slen = len(Sort_cons)
    Iter_combos = {}
    for i in range (1, Slen+1):
        Iter_combos[i] = it.combinations(Sort_cons, r = i)
    Stack_combos = {}
    j = 0
    for i in range(1, Slen+1):
        for IC in Iter_combos[i]:
            IC_array = np.array(IC)     
            Stack_combos[j] = IC_array
            j += 1
    N = len(Stack_combos)
    N1 = int(N-1)
    N12 = int(N1/2)
    Stack_pairs = {}
    for i in range(0, N12):
        for j in range(N12, N1):
            if len(np.intersect1d(Stack_combos[i], Stack_combos[j])) == 0:
                Stack_pairs[i] = Stack_combos[i], Stack_combos[j]
    Stack_pairs[N12] = np.zeros(Slen), Stack_combos[N-1]
    NSP = len(Stack_pairs)
    states = [0]*(NSP)
    for i in Stack_pairs:
        couple = Stack_pairs[i]
        L = len(couple)
        new_couple = [0]*B
        for j in range(0, L):
            element = np.sort(couple[j])[::-1]
            while len(element) < Slen:
                element = np.append(element, 0)
            new_couple[j] = element
        #print(f" State {i} has {B} columns: column 0 is {new_couple[0]} and column 1 is {new_couple[1]}")
        states[i] = new_couple
    shuffles = np.zeros((NSP, B))
    for i in range(0, NSP):
        for j in range(0,B):
            column = states[i][j]
            column = np.append(column, C_next)
            column = zero_delete(column)
            value = bubble_sort(column.copy())
            #print(f"If you place container {C_next} in column {j} of state {i} there will be {value} reshuffles")
            shuffles[i][j] = value
    return shuffles, states
    
def matx_gen(listarr):
    matx_list = [0]*len(listarr)
    i = 0
    for L in listarr:
        matx_list[i] = np.column_stack((L[0], L[1]))
        i += 1
    return matx_list

def removal(MX, r):
    matx  = MX.copy()
    row, col = matx.shape
    for i in range(0, row):
        for j in range(0, col):
            if matx[i, j] == r:
                matx[i, j] = 0
    for j in range(0, row):
        matx[j] = np.sort(matx[j])[::-1]
    return matx

def dict_gen(matx, shuffles, level):
    nodes = {}
    Mlen = len(matx)
    count = 1
    for i in range (0, Mlen):
        index = str(level)+str(count)
        nodes[int(index)] = (matx[i].T, shuffles[i].T)
        count += 1
    return nodes

def equivalency(MX1, MX2):
    if np.array_equal(MX1, MX2) == True:
        return True
    elif np.array_equal(np.flip(MX1, axis = 0), MX2) == True:
        return True
    else:
        return False

def upper(nodes, level):
    a = int(str(level+1)+"1")
    U = {}
    for i in nodes:
        u = {}
        for j in nodes[i][1]:
            u[a] = j
            a += 1
        U[i] = u
    return U

def lower(state, con, col):
    stat = state.copy()
    choice = (stat[col]==0).argmax(axis=0)
    stat[col][choice] = con
    count = 0
    for i in stat:
        count += bubble_sort(i)
    return count

def row_finder(state, con):
    Tlen = len(state)
    for i in range(0, Tlen):
        if con in state[i]:
            return i
        

def next_state(nodes, level, con):
    a = int(str(level-1)+"1")
    S = {}
    V = {}
    L = len(nodes)
    keys = np.array([])
    for i in nodes:
        keys = np.append(keys, i)
    for i in range(0, L):
        for j in range(i+1, L):
            truth = equivalency(removal(nodes[keys[i]][0], con), removal(nodes[keys[j]][0], con))
            if truth == True:
                nodei = nodes[keys[i]][0]
                nodej = nodes[keys[j]][0]
                rnodei = removal(nodei, con)
                rnodej = removal(nodej, con)
                rowi = row_finder(nodei, con)
                rowj = row_finder(nodej, con)
                loweri = lower(rnodei, con, rowi)
                lowerj = lower(rnodej, con, rowj)
                S[a] = removal(nodej, con), np.array([loweri, lowerj])
                V[a] = {keys[i]: loweri , keys[j]: lowerj}
                a += 1   
    return S, V


def looper(containers, level, columns):
    order = containers[::-1]
    Clen = len(containers)
    qshuffs, qstats = main(containers, columns)
    qnodes = dict_gen(matx_gen(qstats), qshuffs, level)
    res_dict = upper(qnodes, level)
    current_nodes, current_shuffs = qnodes, qshuffs
    for i in range(1, Clen):
        current_nodes, current_shuffs = next_state(current_nodes, level, order[i])
        level -= 1
        for i in current_nodes:
            res_dict[i] = current_shuffs[i]
    return res_dict
        
    
q = np.array([1, 2, 4, 3])
print(looper(q, 3, 2))
